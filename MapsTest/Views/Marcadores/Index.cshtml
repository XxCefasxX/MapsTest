@model IEnumerable<MapsTest.Models.Marcador>

@{
    ViewData["Title"] = "Index";
}
<link rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin="" />

<!-- JavaScript de Leaflet -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
        crossorigin=""></script>

<!-- CSS de Awesome Markers -->
<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css" />

<!-- JavaScript de Awesome Markers -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.min.js"></script>

<!-- FontAwesome (para íconos) -->
<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />


<h1>Indexwww</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

@using (Html.BeginForm("GetMarcadores", "Marcadores", FormMethod.Post))
{
    <input type="text" name="colonia" placeholder="Colonia" value="@ViewBag.colonia" />
    <input type="text" name="calle1" placeholder="Calle 1" value="@ViewBag.calle1" />
    <input type="text" name="calle2" placeholder="Calle 2" value="@ViewBag.calle2" />
    <button type="submit">Filtrar</button>
}

<div class="mb-3">
    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#imageModal">
        <i class="fas fa-image"></i> Ver Demo
    </button>
</div>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Titulo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Colonia)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Calle1)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Calle2)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Descripcion)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Categoria)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Precio)
            </th>

        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Titulo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Colonia)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Calle1)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Calle2)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Descripcion)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Categoria)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Precio)
                </td>

            </tr>
        }
    </tbody>
</table>



<!-- Modal para mostrar la imagen -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Imagen del Marcador</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="demoplaca">
               <div class="cl-logo">
                    <img id="logo-preview" src="@ViewBag.LogoUrl"/>
               </div>
            </div>

            <div class="mt-3">
                <label class="form-label">Seleccionar logo para previsualizar:</label>
                <input type="file" id="imageSelector" class="form-control" accept="image/*">
            </div>


        </div>
    </div>
</div>


<!-- Contenedor del mapa -->
<div id="map" style="height: 500px; width: 100%;"></div>

<!-- ✅ Carga Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<!-- Tu script personalizado (usa Leaflet) -->
<script>



    // ✅ Ahora "L" está definido y puedes usarlo
    // 22.905683, -109.925448
    const map = L.map('map').setView([22.905683, -109.925448], 13);

    // Añade capa de mapa base (OpenStreetMap)
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);
    // const marcadoresGroup = L.featureGroup().addTo(map);

    const iconos = {
        Azul: L.icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
        }),
        Verde: L.icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',
        }),
        Rojo: L.icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
        })
    };


    // Cargar marcadores desde C# y usar js
    // fetch("/Marcadores/GetMarcadores?nombre=Centro")
    //     .then(response => response.json())
    //     .then(marcadores => {
    //         marcadores.forEach(marcador => {
    //             const icono = iconosPorCategoria[marcador.categoria.toLowerCase()] || iconosPorCategoria.azul; // Fallback a "azul"



    //             L.marker([marcador.latitud, marcador.longitud], {
    //                 icon: icono
    //             })
    //                 .addTo(map)
    //                 .bindPopup(`<b>${marcador.titulo}</b><br>${marcador.descripcion}`);
    //         });
    //     });
    const todosMarcadores = [];
    @foreach (var marcador in Model)
    {
        <text>
            L.marker([@marcador.Latitud.ToString(),
            @marcador.Longitud.ToString()],
                { icon: iconos['@marcador.Categoria'] })
                .addTo(map)
                .bindPopup('@Html.Raw(marcador.Titulo)');
        </text>
    }

        // Ajusta el zoom si hay marcadores
    @if (Model.Any())
    {
        <text>
                  const bounds = L.latLngBounds(@Json.Serialize(
            Model.Select(m => new[] { m.Latitud, m.Longitud })
            ));
        map.fitBounds(bounds);
        </text>
    }


        // Vista previa del logo al seleccionar imagen
        document.getElementById('imageSelector').addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (event) {
                    const logoPreview = document.getElementById('logo-preview');
                    logoPreview.src = event.target.result;
                    logoPreview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        });

</script>